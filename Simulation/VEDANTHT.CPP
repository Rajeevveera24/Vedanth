#include<iostream.h>
#include<conio.h>
#include<graphics.h>
#include<stdlib.h>
#include<stdio.h>
#include<dos.h>
#include<string.h>
#include<C:\TURBOC3\Projects\VEDANTH.h>
//Declaration of global variables
char path[2000];/*Character array of path taken by bot during first run.
		It is generated by bot during run time itself,by function
		move which is part of struct bot*/
char path1[2000];
int count;//Counter to store present index of path
void generate_scanned_path();//Generates scanned two D array of path taken by bot(scanned_path)
int scanned_path[100][100];/*The path initially taken by the robot during the
				trial run; It is later shortened */
void draw_scanned_maze();//Draws the path taken by bot during trial run
void short_path_1();//Shortens the path to eliminate the dead ends
void short_path_2();//Eliminates loops and finds the shortest path to the finish
void draw_short_path();//Draws the shortened path without dead ends
int replay_stage=0;/*Depicts the stage at which the bot is;
			Trial run (forward - 0, backward - 1)
		   */
int i_pos_r=0;
int i_pos_c=0;
int i_dir = 2;
int f_pos_r=30;
int f_pos_c=70;
int no_intersection;
int no_path;
struct intersection{
	int r,c;
	char dir[3];
	void init(){
		r=c=0;
		strcpy(dir,"");
	}
}s[20];
int s_count=0;
struct bot{
	int posr,posc;
	int dir;
	void draw_bot(){
		setfillstyle(1,RED);
		fill_grid(posr,posc);
	}
	void init_pos()
	{
		posc=i_pos_c;
		posr=i_pos_r;
		dir=i_dir;
	}
	void move_f(){
		if(dir==1){//going left
		       if((posr>0)&&(matrix[posr-1][posc]==1)){//down
				posr--;
				path[count++]='L';
				draw_bot();
				dir=0;
			}
			else if((posc>0)&&(matrix[posr][posc-1]==1)){//left
				posc--;
				path[count++]='S';
				draw_bot();
				dir=1;
			}
			else if((posr<99)&&(matrix[posr+1][posc]==1)){//up
				posr++;
				path[count++]='R';
				draw_bot();
				dir=2;
			}
			else{//right
				if(posc<99){
					posc++;
					path[count++]='B';
					draw_bot();
					dir=3;
				}
			}
		}
		else if(dir==2){//going up
			if((posc>0)&&(matrix[posr][posc-1]==1)){//left
				posc--;
				path[count++]='L';
				draw_bot();
				dir=1;
			}
			else if((posr<99)&&(matrix[posr+1][posc]==1)){//up
				posr++;
				path[count++]='S';
				draw_bot();
				dir=2;
			}
			else if((posc<99)&&(matrix[posr][posc+1]==1)){//right
				posc++;
				path[count++]='R';
				draw_bot();
				dir=3;
			}
			else{//down
				if(posr>0){
					posr--;
					path[count++]='B';
					draw_bot();
					dir=0;
				}
			}
		}
		else if(dir==3){//going right
			if((posr<99)&&(matrix[posr+1][posc]==1)){//up
				posr++;
				path[count++]='L';
				draw_bot();
				dir=2;
			}
			else if((posc<99)&&(matrix[posr][posc+1]==1)){//right
				posc++;
				path[count++]='S';
				draw_bot();
				dir=3;
			}
			else if((posr>0)&&(matrix[posr-1][posc]==1)){//down
				posr--;
				path[count++]='R';
				draw_bot();
				dir=0;
			}
			else{//left
				if(posc>0){
					posc--;
					path[count++]='B';
					draw_bot();
					dir=1;
				}
			}
		}
		else{//going down
			if((posc<99)&&(matrix[posr][posc+1]==1)){//right
				posc++;
				path[count++]='L';
				draw_bot();
				dir=3;
			}
			else if((posr>0)&&(matrix[posr-1][posc]==1)){//down
				posr--;
				path[count++]='S';
				draw_bot();
				dir=0;
			}
			else if((posc>0)&&(matrix[posr][posc-1]==1)){//left
				posc--;
				path[count++]='R';
				draw_bot();
				dir=1;
			}
			else{//up
				if(posr<99){
					posr++;
					path[count++]='B';
					draw_bot();
					dir=2;
				}
			}
		}
		if((posr == f_pos_r && posc == f_pos_c)){
			path[count++]='D';
			replay_stage++;
			if(dir==0){
				dir=2;
			}
			else if(dir==1){
				dir=3;
			}
			else if(dir==2)
			{
				dir=0;
			}
			else{
				dir=1;
			}
			return;
		}
	}
	void move_b(){
		if(dir==1){//going left
		       if((posr>0)&&(matrix[posr-1][posc]==1)){//down
				posr--;
				path[count++]='L';
				draw_bot();
				dir=0;
			}
			else if((posc>0)&&(matrix[posr][posc-1]==1)){//left
				posc--;
				path[count++]='S';
				draw_bot();
				dir=1;
			}
			else if((posr<99)&&(matrix[posr+1][posc]==1)){//up
				posr++;
				path[count++]='R';
				draw_bot();
				dir=2;
			}
			else{//right
				if(posc<99){
					posc++;
					path[count++]='B';
					draw_bot();
					dir=3;
				}
			}
		}
		else if(dir==2){//going up
			if((posc>0)&&(matrix[posr][posc-1]==1)){//left
				posc--;
				path[count++]='L';
				draw_bot();
				dir=1;
			}
			else if((posr<99)&&(matrix[posr+1][posc]==1)){//up
				posr++;
				path[count++]='S';
				draw_bot();
				dir=2;
			}
			else if((posc<99)&&(matrix[posr][posc+1]==1)){//right
				posc++;
				path[count++]='R';
				draw_bot();
				dir=3;
			}
			else{//down
				if(posr>0){
					posr--;
					path[count++]='B';
					draw_bot();
					dir=0;
				}
			}
		}
		else if(dir==3){//going right
			if((posr<99)&&(matrix[posr+1][posc]==1)){//up
				posr++;
				path[count++]='L';
				draw_bot();
				dir=2;
			}
			else if((posc<99)&&(matrix[posr][posc+1]==1)){//right
				posc++;
				path[count++]='S';
				draw_bot();
				dir=3;
			}
			else if((posr>0)&&(matrix[posr-1][posc]==1)){//down
				posr--;
				path[count++]='R';
				draw_bot();
				dir=0;
			}
			else{//left
				if(posc>0){
					posc--;
					path[count++]='B';
					draw_bot();
					dir=1;
				}
			}
		}
		else{//going down
			if((posc<99)&&(matrix[posr][posc+1]==1)){//right
				posc++;
				path[count++]='L';
				draw_bot();
				dir=3;
			}
			else if((posr>0)&&(matrix[posr-1][posc]==1)){//down
				posr--;
				path[count++]='S';
				draw_bot();
				dir=0;
			}
			else if((posc>0)&&(matrix[posr][posc-1]==1)){//left
				posc--;
				path[count++]='R';
				draw_bot();
				dir=1;
			}
			else{//up
				if(posr<99){
					posr++;
					path[count++]='B';
					draw_bot();
					dir=2;
				}
			}
		}
		if((posr == i_pos_r && posc == i_pos_c)){
			path[count++]='D';
			replay_stage++;
			return;
		}
	}
}b;
/*main starts here. graph is initialized and closed
in main only.all the function defenitions are after main()*/
int main()
{
	b.init_pos();
	open_graph();
	generate_maze();
	delay(2000);
	b.move_f();
		for(;replay_stage<1;){
			generate_maze();
			b.move_f();
			delay(30);
		}
		for(;replay_stage<2;){
			generate_maze();
			b.move_b();
			delay(30);
		}
       //	cleardevice();
       //       closegraph();
       //	cout<<"Broken out of Loop!!!";
       //	getch();
       //	open_graph();
	generate_scanned_path();
	draw_scanned_maze();
	delay(1000);
	short_path_1();
	draw_short_path();
	delay(3000);
	//getch();
	//cleardevice();
	short_path_2();
	setfillstyle(1,YELLOW);
	for(int i=0;i<100;i++){
		for(int j=0;j<100;j++){
			if(scanned_path[i][j] ==  1){
				fill_scanned_grid(i,j);
				delay(10);
			}
		}
	}
	getch();
	cleardevice();
	closegraph();
	return 0;
}
//Function definitions start from here
void draw_scanned_maze()
{
	setfillstyle(1,RED);
	for(int r=0;r<100;r++){
		for(int c=0;c<100;c++){
			if(scanned_path[r][c]==1)
			{
				fill_scanned_grid(r,c);
			}
		}
	}
}
void draw_short_path(){
	setfillstyle(1,BLUE);
	for(int r=0;r<100;r++){
		for(int c=0;c<100;c++){
			if(scanned_path[r][c]==1)
			{
				setfillstyle(1,BLUE);
				fill_scanned_grid(r,c);
				delay(3);
			}
		}
	}
}
void generate_scanned_path(){
	int dir=i_dir,r=i_pos_r,c=i_pos_c;
	for(int i=0;i<100;i++){
		for(int j=0;j<100;j++){
			scanned_path[i][j]=0;
		}
	}
	for(i=0,replay_stage=0;replay_stage<2;i++){
		if(path[i]=='D'){
			if(dir==0){
				dir=2;
			}
			else if(dir==1){
				dir=3;
			}
			else if(dir==2)
			{
				dir=0;
			}
			else{
				dir=1;
			}
			replay_stage++;
		}
		else{
			if(dir==0){
				if(path[i] == 'L'){
					scanned_path[r][c++]=1;
					dir = 3;
				}
				else if(path[i] == 'S'){
					scanned_path[r--][c]=1;
				}
				else if(path[i]== 'R'){
					scanned_path[r][c--]=1;
					dir = 1;
				}
				else{
					scanned_path[r++][c]=1;
					dir = 2;
				}
			}
			else if(dir==1){
				if(path[i] == 'L'){
					scanned_path[r--][c]=1;
					dir = 0;
				}
				else if(path[i] == 'S'){
					scanned_path[r][c--]=1;
				}
				else if(path[i]== 'R'){
					scanned_path[r++][c]=1;
					dir = 2;
				}
				else{
					scanned_path[r][c++]=1;
					dir = 3;
				}
			}
			else if(dir==2){
				if(path[i] == 'L'){
					scanned_path[r][c--]=1;
					dir = 1;
				}
				else if(path[i] == 'S'){
					scanned_path[r++][c]=1;
				}
				else if(path[i]== 'R'){
					scanned_path[r][c++]=1;
					dir = 3;
				}
				else{
					scanned_path[r--][c]=1;
					dir = 0;
				}
			}
			else{
				if(path[i] == 'L'){
					scanned_path[r++][c]=1;
					dir = 2;
				}
				else if(path[i] == 'S'){
					scanned_path[r][c++]=1;
				}
				else if(path[i]== 'R'){
					scanned_path[r--][c]=1;
					dir = 0;
				}
				else{
					scanned_path[r][c--]=1;
					dir = 1;
				}
			}
		}
	}
}
void short_path_1(){
	int r=i_pos_r,c=i_pos_c,dir=i_dir;
	int last_turn_r[50],last_turn_c[50],last_dir[50];
	int c1=0,r1=0,d1=0;
	for(int i=0;i<100;i++){
		for(int j=0;j<100;j++){
			matrix[i][j]=scanned_path[i][j];
			scanned_path[i][j]=0;
		}
	}
	for(;(c!=f_pos_c)||(r!=f_pos_r);){
		if(dir==0){//Down
			if((c<99)&&matrix[r][c+1]>0){//L
				last_turn_c[c1++] = c;
				last_turn_r[r1++] = r;
				last_dir[d1++]=dir;
				scanned_path[r][c++]=1;
				dir=3;
			}
			else if((r>0)&&matrix[r-1][c]>0){//S
				if(matrix[r][c-1]>0){
					last_turn_c[c1++] = c;
					last_turn_r[r1++] = r;
					last_dir[d1++]=1;
				}
				scanned_path[r--][c]=1;
			}
			else if((c>0)&&matrix[r][c-1]>0){//R
				last_turn_c[c1++] = c;
				last_turn_r[r1++] = r;
				last_dir[d1++]=dir;
				scanned_path[r][c--]=1;
				dir=1;
			}
			else{
				for(int k=r;k<=last_turn_r[r1-1];k++)
				{
					scanned_path[k][c] = 0;
					matrix[k][c] = 0;
				}
				r = last_turn_r[r1-1];
				matrix[r][c]=1;
				r1--;
				c1--;
				dir = last_dir[d1-1];
				d1--;
			}
		}
		else if(dir==1){//Left
			if((r>0)&&matrix[r-1][c]>0){//L
				last_turn_c[c1++] = c;
				last_turn_r[r1++] = r;
				last_dir[d1++]=dir;
				scanned_path[r--][c]=1;
				dir=0;
			}
			else if((c>0)&&matrix[r][c-1]>0){//S
				if(matrix[r+1][c]>0){
					last_turn_c[c1++] = c;
					last_turn_r[r1++] = r;
					last_dir[d1++]=2;
				}
				scanned_path[r][c--]=1;
			}
			else if((r<99)&&matrix[r+1][c]>0){//R
				last_turn_c[c1++] = c;
				last_turn_r[r1++] = r;
				last_dir[d1++]=dir;
				scanned_path[r++][c]=1;
				dir=2;
			}
			else{
				for(int k=c;k<=last_turn_c[c1-1];k++)
				{
					scanned_path[r][k] = 0;
					matrix[r][k] = 0;
				}
				c = last_turn_c[c1-1];
				matrix[r][c]=1;
				r1--;
				c1--;
				dir = last_dir[d1-1];
				d1--;
			}
		}
		else if(dir==2){//Up
			if((c>0)&&matrix[r][c-1]>0){//L
				last_turn_c[c1++] = c;
				last_turn_r[r1++] = r;
				last_dir[d1++]=dir;
				scanned_path[r][c--]=1;
				dir=1;
			}
			else if((r<99)&&matrix[r+1][c]>0){//S
				if(matrix[r][c+1]>0){
					last_turn_c[c1++] = c;
					last_turn_r[r1++] = r;
					last_dir[d1++]=3;
				}
				scanned_path[r++][c]=1;
			}
			else if((c<99)&&matrix[r][c+1]>0){//R
				last_turn_c[c1++] = c;
				last_turn_r[r1++] = r;
				last_dir[d1++]=dir;
				scanned_path[r][c++]=1;
				dir=3;
			}
			else{
				for(int k=r;k>=last_turn_r[r1-1];k--)
				{
					scanned_path[k][c] = 0;
					matrix[k][c] = 0;
				}
				r = last_turn_r[r1-1];
				matrix[r][c]=1;
				r1--;
				c1--;
				dir = last_dir[d1-1];
				d1--;
			}
		}
		else{//Right
			if((r<99)&&matrix[r+1][c]>0){//L
				last_turn_c[c1++] = c;
				last_turn_r[r1++] = r;
				last_dir[d1++]=dir;
				scanned_path[r++][c]=1;
				dir=2;
			}
			else if((c<99)&&matrix[r][c+1]>0){//S
				if(matrix[r-1][c]>0){
					last_turn_c[c1++] = c;
					last_turn_r[r1++] = r;
					last_dir[d1++]=0;
				}
				scanned_path[r][c++]=1;
			}
			else if((r>0)&&matrix[r-1][c]>0){//R
				last_turn_c[c1++] = c;
				last_turn_r[r1++] = r;
				last_dir[d1++]=dir;
				scanned_path[r--][c]=1;
				dir=0;
			}
			else{
				for(int k=c;k>=last_turn_c[c1-1];k--)
				{
					scanned_path[r][k] = 0;
					matrix[r][k] = 0;
				}
				c = last_turn_c[c1-1];
				matrix[r][c]=1;
				r1--;
				c1--;
				dir = last_dir[d1-1];
				d1--;
			}
		}
	}
	d1=r1=c1=0;
	if(dir==0){
		dir=2;
	}
	else if(dir==1){
		dir=3;
	}
	else if(dir==2){
		dir=0;
	}
	else{
		dir=1;
	}
	draw_short_path();
	delay(3000);
	for(;(c!=i_pos_c)||(r!=i_pos_r);){
		if(dir==0){//Down
			if((c<99)&&matrix[r][c+1]>0){//L
				last_turn_c[c1++] = c;
				last_turn_r[r1++] = r;
				last_dir[d1++]=dir;
				scanned_path[r][c++]=1;
				dir=3;
			}
			else if((r>0)&&matrix[r-1][c]>0){//S
				if(matrix[r][c-1]>0){
					last_turn_c[c1++] = c;
					last_turn_r[r1++] = r;
					last_dir[d1++]=1;
				}
				scanned_path[r--][c]=1;
			}
			else if((c>0)&&matrix[r][c-1]>0){//R
				last_turn_c[c1++] = c;
				last_turn_r[r1++] = r;
				last_dir[d1++]=dir;
				scanned_path[r][c--]=1;
				dir=1;
			}
			else{
				for(int k=r;k<=last_turn_r[r1-1];k++)
				{
					scanned_path[k][c] = 0;
					matrix[k][c] = 0;
				}
				r = last_turn_r[r1-1];
				matrix[r][c]=1;
				r1--;
				c1--;
				dir = last_dir[d1-1];
				d1--;
			}
		}
		else if(dir==1){//Left
			if((r>0)&&matrix[r-1][c]>0){//L
				last_turn_c[c1++] = c;
				last_turn_r[r1++] = r;
				last_dir[d1++]=dir;
				scanned_path[r--][c]=1;
				dir=0;
			}
			else if((c>0)&&matrix[r][c-1]>0){//S
				if(matrix[r+1][c]>0){
					last_turn_c[c1++] = c;
					last_turn_r[r1++] = r;
					last_dir[d1++]=2;
				}
				scanned_path[r][c--]=1;
			}
			else if((r<99)&&matrix[r+1][c]>0){//R
				last_turn_c[c1++] = c;
				last_turn_r[r1++] = r;
				last_dir[d1++]=dir;
				scanned_path[r++][c]=1;
				dir=2;
			}
			else{
				for(int k=c;k<=last_turn_c[c1-1];k++)
				{
					scanned_path[r][k] = 0;
					matrix[r][k] = 0;
				}
				c = last_turn_c[c1-1];
				matrix[r][c]=1;
				r1--;
				c1--;
				dir = last_dir[d1-1];
				d1--;
			}
		}
		else if(dir==2){//Up
			if((c>0)&&matrix[r][c-1]>0){//L
				last_turn_c[c1++] = c;
				last_turn_r[r1++] = r;
				last_dir[d1++]=dir;
				scanned_path[r][c--]=1;
				dir=1;
			}
			else if((r<99)&&matrix[r+1][c]>0){//S
				if(matrix[r][c+1]>0){
					last_turn_c[c1++] = c;
					last_turn_r[r1++] = r;
					last_dir[d1++]=3;
				}
				scanned_path[r++][c]=1;
			}
			else if((c<99)&&matrix[r][c+1]>0){//R
				last_turn_c[c1++] = c;
				last_turn_r[r1++] = r;
				last_dir[d1++]=dir;
				scanned_path[r][c++]=1;
				dir=3;
			}
			else{
				for(int k=r;k>=last_turn_r[r1-1];k--)
				{
					scanned_path[k][c] = 0;
					matrix[k][c] = 0;
				}
				r = last_turn_r[r1-1];
				matrix[r][c]=1;
				r1--;
				c1--;
				dir = last_dir[d1-1];
				d1--;
			}
		}
		else{//Right
			if((r<99)&&matrix[r+1][c]>0){//L
				last_turn_c[c1++] = c;
				last_turn_r[r1++] = r;
				last_dir[d1++]=dir;
				scanned_path[r++][c]=1;
				dir=2;
			}
			else if((c<99)&&matrix[r][c+1]>0){//S
				if(matrix[r-1][c]>0){
					last_turn_c[c1++] = c;
					last_turn_r[r1++] = r;
					last_dir[d1++]=0;
				}
				scanned_path[r][c++]=1;
			}
			else if((r>0)&&matrix[r-1][c]>0){//R
				last_turn_c[c1++] = c;
				last_turn_r[r1++] = r;
				last_dir[d1++]=dir;
				scanned_path[r--][c]=1;
				dir=0;
			}
			else{
				for(int k=c;k>=last_turn_c[c1-1];k--)
				{
					scanned_path[r][k] = 0;
					matrix[r][k] = 0;
				}
				c = last_turn_c[c1-1];
				matrix[r][c]=1;
				r1--;
				c1--;
				dir = last_dir[d1-1];
				d1--;
			}
		}
	}
}
void short_path_2(){
	int r=i_pos_r,c=i_pos_c,dir=i_dir;
	count=0;
	no_intersection=0;
	no_path=1;
	int present_intersection=0;
	for(int k=0;k<20;k++){
		s[k].init();
	}
	for(;(c!=f_pos_c)||(r!=f_pos_r);){
		if(dir==0){//Down
			if(matrix[r][c]==1){
				if((c<99)&&matrix[r][c+1]>0){//Left
					if((r>0)&&matrix[r-1][c]>0){//Straight
						if((c>0)&&matrix[r][c-1]>0){//Right
							no_intersection+=1;
							no_path*=3;
							matrix[r][c]=2;
							s[s_count].r=r;
							s[s_count].c=c;
							strcpy(s[s_count].dir,"LSR");
							s_count++;
						}
						else{//No right
							no_intersection+=1;
							no_path*=2;
							matrix[r][c]=2;
							s[s_count].r=r;
							s[s_count].c=c;
							strcpy(s[s_count].dir,"LS");
							s_count++;
						}
					}
					else{
						if((c>0)&&matrix[r][c-1]>0){
							no_intersection+=1;
							no_path*=2;
							matrix[r][c]=2;
							s[s_count].r=r;
							s[s_count].c=c;
							strcpy(s[s_count].dir,"LR");
							s_count++;
						}
						else{
						}
					}
				}
				else{//No left
					if((r>0)&&matrix[r-1][c]>0){//Straight
						if((c>0)&&matrix[r][c-1]>0){//Right
							no_intersection++;
							no_path*=2;
							matrix[r][c]=2;
							s[s_count].r=r;
							s[s_count].c=c;
							strcpy(s[s_count].dir,"SR");
							s_count++;
						}
						else{//No right
						}
					}
					else{
						if((c>0)&&matrix[r][c-1]>0){
						}
						else{
						}
					}
				}
			}
			//Moving from here
			if((c<99)&&matrix[r][c+1]>0){//L
				c++;
				dir=3;
			}
			else if((r>0)&&matrix[r-1][c]>0){//S
				r--;
			}
			else if((c>0)&&matrix[r][c-1]>0){//R
				c--;
				dir=1;
			}
			else{
			}
		}
		else if(dir==1){//Left
			if(matrix[r][c]==1){
				if((r>0)&&matrix[r-1][c]>0){//Left
					if((c>0)&&matrix[r][c-1]>0){//Straight
						if((r<99)&&matrix[r+1][c]>0){//Right
							no_intersection++;
							no_path*=3;
							matrix[r][c]=2;
							s[s_count].r=r;
							s[s_count].c=c;
							strcpy(s[s_count].dir,"LSR");
							s_count++;
						}
						else{//No right
							no_intersection+=1;
							no_path*=2;
							matrix[r][c]=2;
							s[s_count].r=r;
							s[s_count].c=c;
							strcpy(s[s_count].dir,"LS");
							s_count++;
						}
					}
					else{
						if((r<99)&&matrix[r+1][c]>0){
							no_intersection+=1;
							no_path*=2;
							matrix[r][c]=2;
							s[s_count].r=r;
							s[s_count].c=c;
							strcpy(s[s_count].dir,"LR");
							s_count++;
						}
						else{
						}
					}
				}
				else{//No left
					if((c>0)&&matrix[r][c-1]>0){//Straight
						if((r<99)&&matrix[r+1][c]>0){//Right
							no_intersection+=1;
							no_path*=2;
							matrix[r][c]=2;
							s[s_count].r=r;
							s[s_count].c=c;
							strcpy(s[s_count].dir,"SR");
							s_count++;
						}
						else{//No right
						}
					}
					else{
						if((r<99)&&matrix[r+1][c]>0){
						}
						else{
						}
					}
				}
			}
			//Moving from here
			if((r>0)&&matrix[r-1][c]>0){//L
				r--;
				dir=0;
			}
			else if((c>0)&&matrix[r][c-1]>0){//S
				c--;
			}
			else if((r<99)&&matrix[r+1][c]>0){//R
				r++;
				dir=2;
			}
			else{
			}
		}
		else if(dir==2){//Up
			if(matrix[r][c]==1){
				if((c>0)&&matrix[r][c-1]>0){//Left
					if((r<99)&&matrix[r+1][c]>0){//Straight
						if((c<99)&&matrix[r][c+1]>0){//Right
							no_intersection++;
							no_path*=3;
							matrix[r][c]=2;
							s[s_count].r=r;
							s[s_count].c=c;
							strcpy(s[s_count].dir,"LSR");
							s_count++;
						}
						else{//No right
							no_intersection+=1;
							no_path*=2;
							matrix[r][c]=2;
							s[s_count].r=r;
							s[s_count].c=c;
							strcpy(s[s_count].dir,"LS");
							s_count++;
						}
					}
					else{
						if((c<99)&&matrix[r][c+1]>0){
							no_intersection+=1;
							no_path*=2;
							matrix[r][c]=2;
							s[s_count].r=r;
							s[s_count].c=c;
							strcpy(s[s_count].dir,"LR");
							s_count++;
						}
						else{
						}
					}
				}
				else{//No left
					if((r<99)&&matrix[r+1][c]>0){//Straight
						if((c<99)&&matrix[r][c+1]>0){//Right
							no_intersection+=1;
							no_path*=2;
							matrix[r][c]=2;
							s[s_count].r=r;
							s[s_count].c=c;
							strcpy(s[s_count].dir,"SR");
							s_count++;
						}
						else{//No right
						}
					}
					else{
						if((c<99)&&matrix[r][c+1]>0){
						}
						else{
						}
					}
				}
			}
			//Moving from here
			if((c>0)&&matrix[r][c-1]>0){//L
				c--;
				dir=1;
			}
			else if((r<99)&&matrix[r+1][c]>0){//S
				r++;
			}
			else if((c<99)&&matrix[r][c+1]>0){//R
				c++;
				dir=3;
			}
			else{
			}
		}
		else{//Right
			if(matrix[r][c]==1){
				if((r<99)&&matrix[r+1][c]>0){//Left
					if((c<99)&&matrix[r][c+1]>0){//Straight
						if((r>0)&&matrix[r-1][c]>0){//Right
							no_intersection++;
							no_path*=3;
							matrix[r][c]=2;
							s[s_count].r=r;
							s[s_count].c=c;
							strcpy(s[s_count].dir,"LSR");
							s_count++;
						}
						else{//No right
							no_intersection+=1;
							no_path*=2;
							matrix[r][c]=2;
							s[s_count].r=r;
							s[s_count].c=c;
							strcpy(s[s_count].dir,"LS");
							s_count++;
						}
					}
					else{
						if((r>0)&&matrix[r-1][c]>0){
							no_intersection+=1;
							no_path*=2;
							matrix[r][c]=2;
							s[s_count].r=r;
							s[s_count].c=c;
							strcpy(s[s_count].dir,"LR");
							s_count++;
						}
						else{
						}
					}
				}
				else{//No left
					if((c<99)&&matrix[r][c+1]>0){//Straight
						if((r>0)&&matrix[r-1][c]>0){//Right
							no_intersection+=1;
							no_path*=2;
							matrix[r][c]=2;
							s[s_count].r=r;
							s[s_count].c=c;
							strcpy(s[s_count].dir,"SR");
							s_count++;
						}
						else{//No right
						}
					}
					else{
						if((r>0)&&matrix[r-1][c]>0){
						}
						else{
						}
					}
				}
			}
			//Moving from here
			if((r<99)&&matrix[r+1][c]>0){//L
				r++;
				dir=2;
			}
			else if((c<99)&&matrix[r][c+1]>0){//S
				c++;
			}
			else if((r>0)&&matrix[r-1][c]>0){//R
				r--;
				dir=0;
			}
			else{
			}
		}
	}
	if(dir==0){
		dir=2;
	}
	else if(dir==1){
		dir=3;
	}
	else if(dir==2){
		dir=0;
	}
	else{
		dir=1;
	}
	for(;(c!=i_pos_c)||(r!=i_pos_r);){
		if(dir==0){//Down
			if(matrix[r][c]==1){
				if((c<99)&&matrix[r][c+1]>0){//Left
					if((r>0)&&matrix[r-1][c]>0){//Straight
						if((c>0)&&matrix[r][c-1]>0){//Right
							no_intersection+=1;
							no_path*=3;
							s[s_count].r=r;
							s[s_count].c=c;
							strcpy(s[s_count].dir,"LSR");
							s_count++;
						}
						else{//No right
							no_intersection+=1;
							no_path*=2;
							s[s_count].r=r;
							s[s_count].c=c;
							strcpy(s[s_count].dir,"LS");
							s_count++;
						}
					}
					else{
						if((c>0)&&matrix[r][c-1]>0){
							no_intersection+=1;
							no_path*=2;
							s[s_count].r=r;
							s[s_count].c=c;
							strcpy(s[s_count].dir,"LR");
							s_count++;
						}
						else{
						}
					}
				}
				else{//No left
					if((r>0)&&matrix[r-1][c]>0){//Straight
						if((c>0)&&matrix[r][c-1]>0){//Right
							no_intersection++;
							no_path*=2;
							s[s_count].r=r;
							s[s_count].c=c;
							strcpy(s[s_count].dir,"SR");
							s_count++;
						}
						else{//No right
						}
					}
					else{
						if((c>0)&&matrix[r][c-1]>0){
						}
						else{
						}
					}
				}
			}
			//Moving from here
			if((c<99)&&matrix[r][c+1]>0){//L
				c++;
				dir=3;
			}
			else if((r>0)&&matrix[r-1][c]>0){//S
				r--;
			}
			else if((c>0)&&matrix[r][c-1]>0){//R
				c--;
				dir=1;
			}
			else{
			}
		}
		else if(dir==1){//Left
			if(matrix[r][c]==1){
				if((r>0)&&matrix[r-1][c]>0){//Left
					if((c>0)&&matrix[r][c-1]>0){//Straight
						if((r<99)&&matrix[r+1][c]>0){//Right
							no_intersection++;
							no_path*=3;
							s[s_count].r=r;
							s[s_count].c=c;
							strcpy(s[s_count].dir,"LSR");
							s_count++;
						}
						else{//No right
							no_intersection+=1;
							no_path*=2;
							s[s_count].r=r;
							s[s_count].c=c;
							strcpy(s[s_count].dir,"LS");
							s_count++;
						}
					}
					else{
						if((r<99)&&matrix[r+1][c]>0){
							no_intersection+=1;
							no_path*=2;
							s[s_count].r=r;
							s[s_count].c=c;
							strcpy(s[s_count].dir,"LR");
							s_count++;
						}
						else{
						}
					}
				}
				else{//No left
					if((c>0)&&matrix[r][c-1]>0){//Straight
						if((r<99)&&matrix[r+1][c]>0){//Right
							no_intersection+=1;
							no_path*=2;
							s[s_count].r=r;
							s[s_count].c=c;
							strcpy(s[s_count].dir,"SR");
							s_count++;
						}
						else{//No right
						}
					}
					else{
						if((r<99)&&matrix[r+1][c]>0){
						}
						else{
						}
					}
				}
			}
			//Moving from here
			if((r>0)&&matrix[r-1][c]>0){//L
				r--;
				dir=0;
			}
			else if((c>0)&&matrix[r][c-1]>0){//S
				c--;
			}
			else if((r<99)&&matrix[r+1][c]>0){//R
				r++;
				dir=2;
			}
			else{
			}
		}
		else if(dir==2){//Up
			if(matrix[r][c]==1){
				if((c>0)&&matrix[r][c-1]>0){//Left
					if((r<99)&&matrix[r+1][c]>0){//Straight
						if((c<99)&&matrix[r][c+1]>0){//Right
							no_intersection++;
							no_path*=3;
							s[s_count].r=r;
							s[s_count].c=c;
							strcpy(s[s_count].dir,"LSR");
							s_count++;
						}
						else{//No right
							no_intersection+=1;
							no_path*=2;
							s[s_count].r=r;
							s[s_count].c=c;
							strcpy(s[s_count].dir,"LS");
							s_count++;
						}
					}
					else{
						if((c<99)&&matrix[r][c+1]>0){
							no_intersection+=1;
							no_path*=2;
							s[s_count].r=r;
							s[s_count].c=c;
							strcpy(s[s_count].dir,"LR");
							s_count++;
						}
						else{
						}
					}
				}
				else{//No left
					if((r<99)&&matrix[r+1][c]>0){//Straight
						if((c<99)&&matrix[r][c+1]>0){//Right
							no_intersection+=1;
							no_path*=2;
							s[s_count].r=r;
							s[s_count].c=c;
							strcpy(s[s_count].dir,"SR");
							s_count++;
						}
						else{//No right
						}
					}
					else{
						if((c<99)&&matrix[r][c+1]>0){
						}
						else{
						}
					}
				}
			}
			//Moving from here
			if((c>0)&&matrix[r][c-1]>0){//L
				c--;
				dir=1;
			}
			else if((r<99)&&matrix[r+1][c]>0){//S
				r++;
			}
			else if((c<99)&&matrix[r][c+1]>0){//R
				c++;
				dir=3;
			}
			else{
			}
		}
		else{//Right
			if(matrix[r][c]==1){
				if((r<99)&&matrix[r+1][c]>0){//Left
					if((c<99)&&matrix[r][c+1]>0){//Straight
						if((r>0)&&matrix[r-1][c]>0){//Right
							no_intersection++;
							no_path*=3;
							s[s_count].r=r;
							s[s_count].c=c;
							strcpy(s[s_count].dir,"LSR");
							s_count++;
						}
						else{//No right
							no_intersection+=1;
							no_path*=2;
							s[s_count].r=r;
							s[s_count].c=c;
							strcpy(s[s_count].dir,"LS");
							s_count++;
						}
					}
					else{
						if((r>0)&&matrix[r-1][c]>0){
							no_intersection+=1;
							no_path*=2;
							s[s_count].r=r;
							s[s_count].c=c;;
							strcpy(s[s_count].dir,"LR");
							s_count++;
						}
						else{
						}
					}
				}
				else{//No left
					if((c<99)&&matrix[r][c+1]>0){//Straight
						if((r>0)&&matrix[r-1][c]>0){//Right
							no_intersection+=1;
							no_path*=2;
							s[s_count].r=r;
							s[s_count].c=c;
							strcpy(s[s_count].dir,"SR");
							s_count++;
						}
						else{//No right
						}
					}
					else{
						if((r>0)&&matrix[r-1][c]>0){
						}
						else{
						}
					}
				}
			}
			//Moving from here
			if((r<99)&&matrix[r+1][c]>0){//L
				r++;
				dir=2;
			}
			else if((c<99)&&matrix[r][c+1]>0){//S
				c++;
			}
			else if((r>0)&&matrix[r-1][c]>0){//R
				r--;
				dir=0;
			}
			else{
			}
		}
	}
	for(int i=0;i<100;i++){
		for(int j=0;j<100;j++){
			scanned_path[i][j]=matrix[i][j];
			if(scanned_path[i][j]==2){
				scanned_path[i][j]=1;
			}
		}
	}
	r=i_pos_r;
	c=i_pos_c;
	dir = i_dir;
	strcpy(path1,"");
	count=0;
	for(;(r!=s[0].r || c!=s[0].c);){
		if(dir==0){
			if((c<99)&&scanned_path[r][c+1]==1){
				path1[count++]='L';
				c++;
				dir=3;
			}
			else if((r>0)&&scanned_path[r-1][c]==1){
				path1[count++]='S';
				r--;
			}
			else if((c>0)&&scanned_path[r][c-1]==1){
				path1[count++]='R';
				c--;
				dir=1;
			}
			else{
			}
		}
		else if(dir==1){
			if((r>0)&&scanned_path[r-1][c]==1){
				path1[count++]='L';
				r--;
				dir=0;
			}
			else if((c>0)&&scanned_path[r][c-1]==1){
				path1[count++]='S';
				c--;
			}
			else if((r<99)&&scanned_path[r+1][c]==1){
				path1[count++]='R';
				r++;
				dir=2;
			}
			else{
			}
		}
		else if(dir==2){
			if((c<0)&&scanned_path[r][c-1]==1){
				path1[count++]='L';
				c--;
				dir=1;
			}
			else if((r<99)&&scanned_path[r+1][c]==1){
				path1[count++]='S';
				r++;
			}
			else if((c<99)&&scanned_path[r][c+1]==1){
				path1[count++]='R';
				c++;
				dir=3;
			}
			else{
			}
		}
		else{
			if((r<99)&&scanned_path[r+1][c]==1){
				path1[count++]='L';
				r++;
				dir=2;
			}
			else if((c<99)&&scanned_path[r][c+1]==1){
				path1[count++]='S';
				c++;
			}
			else if((r>0)&&scanned_path[r-1][c]==1){
				path1[count++]='R';
				r--;
				dir=0;
			}
			else{
			}
		}
	}
	char path2[3][200];
	int count2[3];
	count2[0]=0;
	count2[1]=0;
	count2[2]=0;
	int prev_dir=dir;
	int prev_dir1[3];
	int j=1;
	char shortpath[200];
	/*for(i=1;i<no_intersection;){
		if(r==s[i].r && c==s[i].c){
			if(j>=strlen(s[i-1].dir)){
				//Checking for the shortest path
				strcpy(shortpath,path2[0]);
				dir = prev_dir1[0];
				for(int k=1;k<strlen(s[i-1].dir);k++){
					if(strlen(shortpath)>strlen(path2[k])){
						strcpy(shortpath,path2[k]);
						dir = prev_dir1[k];
					}
				}
				prev_dir=dir;
				strcat(path1,shortpath);
				cleardevice();
				closegraph();
				cout<<dir<<endl<<prev_dir<<endl;
				puts(shortpath);
				puts(path1);
				getch();
				open_graph();
				//Done selecting the shortest path
				j=1;
				i++;
				count2[0]=0;
				count2[1]=0;
				count2[2]=0;
				strcpy(path2[0],"");
				strcpy(path2[1],"");
				strcpy(path2[2],"");
			}
			else{
				prev_dir1[j-1]=dir;
				dir=prev_dir;
				j++;
				r=s[i-1].r;
				c=s[i-1].c;
				if(dir==0){
					if(s[i-1].dir[j-1]=='S'){
						path2[j-1][count2[j-1]++]='S';
						r--;
					}
					else{
						path2[j-1][count2[j-1]++]='R';
						c--;
						dir=1;
					}
				}
				else if(dir==1){
					if(s[i-1].dir[j-1]=='S'){
						path2[j-1][count2[j-1]++]='S';
						c--;
					}
					else{
						path2[j-1][count2[j-1]++]='R';
						r++;
						dir=2;
					}
				}
				else if(dir==2){
					if(s[i-1].dir[j-1]=='S'){
						path2[j-1][count2[j-1]++]='S';
						r++;
					}
					else{
						path2[j-1][count2[j-1]++]='R';
						c++;
						dir=3;
					}
				}
				else{
					if(s[i-1].dir[j-1]=='S'){
						path2[j-1][count2[j-1]++]='S';
						c++;
					}
					else{
						path2[j-1][count2[j-1]++]='R';
						r--;
						dir=0;
					}
				}
			}
		}
		else{
			if(dir==0){
				if((c<99)&&(scanned_path[r][c+1]==1)){
					path2[j-1][count2[j-1]++]='L';
					c++;
					dir=3;
				}
				else if((r>0)&&(scanned_path[r-1][c]==1)){
					path2[j-1][count2[j-1]++]='S';
					r--;
				}
				else if((c>0)&&(scanned_path[r][c-1]==1)){
					path2[j-1][count2[j-1]++]='R';
					c--;
					dir=1;
				}
				else{
					break;
				}
			}
			else if(dir==1){
				if((r>0)&&(scanned_path[r-1][c]==1)){
					path2[j-1][count2[j-1]++]='L';
					r--;
					dir=0;
				}
				else if((c>0)&&(scanned_path[r][c-1]==1)){
					path2[j-1][count2[j-1]++]='S';
					c--;
				}
				else if((r<99)&&(scanned_path[r+1][c]==1)){
					path2[j-1][count2[j-1]++]='R';
					r++;
					dir=2;
				}
				else{
					break;
				}
			}
			else if(dir==2){
				if((c>0)&&(scanned_path[r][c-1]==1)){
					path2[j-1][count2[j-1]++]='L';
					c--;
					dir=1;
				}
				else if((r<99)&&(scanned_path[r+1][c]==1)){
					path2[j-1][count2[j-1]++]='S';
					r++;
				}
				else if((c<99)&&(scanned_path[r][c+1]==1)){
					path2[j-1][count2[j-1]++]='R';
					c++;
					dir=3;
				}
				else{
					break;
				}
			}
			else{
				if((r<99)&&(scanned_path[r+1][c]==1)){
					path2[j-1][count2[j-1]++]='L';
					r++;
					dir=2;
				}
				else if((c<99)&&(scanned_path[r][c+1]==1)){
					path2[j-1][count2[j-1]++]='S';
					c++;
				}
				else if((r>0)&&(scanned_path[r-1][c]==1)){
					path2[j-1][count2[j-1]++]='R';
					r--;
					dir=0;
				}
				else{
					break;
				}
			}
		}
	}*/
	for(i=0;i<100;i++){
		for(int j=0;j<100;j++){
			scanned_path[i][j] = 0;
		}
	}
	for(i=0;i<=20;i++){
		scanned_path[i][0] = 1;
	}
	for(i=0;i<=30;i++){
		scanned_path[20][i] = 1;
	}
	for(i=20;i<=30;i++){
		scanned_path[i][30] = 1;
	}
	for(i=30;i<=70;i++){
		scanned_path[30][i] = 1;
	}

}
